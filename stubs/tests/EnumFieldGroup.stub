<?php

/**
 * This file has been auto-amended.
 */

declare(strict_types=1);

namespace Foo\Bar;

use Forme\Framework\Fields\FieldGroupInterface;

final class TestFieldGroup implements FieldGroupInterface
{
    public function add(): void
    {
        $variable = 'field_62c332ac9568t';
        acf_add_local_field_group(['key' => 'group_62c3329e808ca', 'title' => 'Test Group', 'fields' => [['key' => \Foobar\ProjectNameSpace\Enums\FooBarField::TEXT()->key, 'label' => \Foobar\ProjectNameSpace\Enums\FooBarField::TEXT()->label, 'name' => \Foobar\ProjectNameSpace\Enums\FooBarField::TEXT()->name, 'type' => 'text', 'instructions' => '', 'required' => 0, 'conditional_logic' => 0, 'wrapper' => ['width' => '', 'class' => '', 'id' => ''], 'default_value' => '', 'placeholder' => '', 'prepend' => '', 'append' => '', 'maxlength' => ''], ['key' => \Foobar\ProjectNameSpace\Enums\FooBarField::NUMBER()->key, 'label' => \Foobar\ProjectNameSpace\Enums\FooBarField::NUMBER()->label, 'name' => \Foobar\ProjectNameSpace\Enums\FooBarField::NUMBER()->name, 'type' => 'number', 'instructions' => '', 'required' => 0, 'conditional_logic' => 0, 'wrapper' => ['width' => '', 'class' => '', 'id' => ''], 'default_value' => '', 'placeholder' => '', 'prepend' => '', 'append' => '', 'min' => '', 'max' => '', 'step' => ''], ['key' => \Foobar\ProjectNameSpace\Enums\FooBarField::SELECT()->key, 'label' => \Foobar\ProjectNameSpace\Enums\FooBarField::SELECT()->label, 'name' => \Foobar\ProjectNameSpace\Enums\FooBarField::SELECT()->name, 'type' => 'select', 'instructions' => fn() => 'this still works with an arbitrary expression here', 'required' => 1, 'conditional_logic' => 0, 'wrapper' => ['width' => '', 'class' => '', 'id' => ''], 'choices' => ['foo: Foo' => 'foo: Foo', 'bar: Bar' => 'bar: Bar', 'baz: Baz' => 'baz: Baz'], 'default_value' => false, 'allow_null' => 0, 'multiple' => 0, 'ui' => 0, 'return_format' => 'value', 'ajax' => 0, 'placeholder' => ''], ['key' => $variable, 'label' => 'Ignored', 'name' => 'ignored', 'type' => 'text', 'instructions' => 'This will get ignored because the key is an expression and is therefore not an enum candidate', 'required' => 0, 'conditional_logic' => 0, 'wrapper' => ['width' => '', 'class' => '', 'id' => ''], 'default_value' => '', 'placeholder' => '', 'prepend' => '', 'append' => '', 'maxlength' => '']], 'location' => [[['param' => 'post_type', 'operator' => '==', 'value' => 'post']]], 'menu_order' => 0, 'position' => 'normal', 'style' => 'default', 'label_placement' => 'top', 'instruction_placement' => 'label', 'hide_on_screen' => '', 'active' => true, 'description' => '', 'show_in_rest' => 0]);
    }
}
